# Use Node.js as base image (with Java included for the integration)
FROM openjdk:17-slim-buster

# Set environment variables
ENV PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
ENV DISPLAY=:99
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0
ENV NODE_TLS_REJECT_UNAUTHORIZED=0

# Working directory
WORKDIR /app

# Install system dependencies for Playwright
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    unzip \
    xvfb \
    gnupg \
    ca-certificates \
    fonts-liberation \
    fonts-freefont-ttf \
    fontconfig \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libcups2 \
    libdbus-1-3 \
    libgbm1 \
    libgdk-pixbuf2.0-0 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    xdg-utils \
    libdrm2 \
    libxshmfence1 \
    dos2unix \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -sL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm@9.8.1

# Install Playwright without browser auto-download
RUN npm init -y \
    && npm install playwright@1.42.0

# Download and install Chromium manually (to avoid system dependency issues)
RUN mkdir -p /ms-playwright/chromium-1105 \
    && cd /ms-playwright/chromium-1105 \
    && curl -fsSL -o chromium-linux.zip https://playwright.azureedge.net/builds/chromium/1105/chromium-linux.zip \
    && unzip -q chromium-linux.zip \
    && rm -f chromium-linux.zip \
    && chmod -R +x chrome-linux

# Create Xvfb startup script with explicit line endings
RUN echo '#!/bin/bash' > /app/start-xvfb.sh \
    && echo 'Xvfb :99 -screen 0 1280x1024x24 &' >> /app/start-xvfb.sh \
    && chmod +x /app/start-xvfb.sh \
    && dos2unix /app/start-xvfb.sh

# Create a script to start the Playwright server with explicit line endings
RUN echo '#!/bin/bash' > /app/start-playwright-server.sh \
    && echo 'source /app/start-xvfb.sh' >> /app/start-playwright-server.sh \
    && echo 'echo "Starting Playwright server on port 9222..."' >> /app/start-playwright-server.sh \
    && echo 'cd /app' >> /app/start-playwright-server.sh \
    && echo 'npx playwright@1.42.0 run-server --port=9222 --host=0.0.0.0' >> /app/start-playwright-server.sh \
    && chmod +x /app/start-playwright-server.sh \
    && dos2unix /app/start-playwright-server.sh

# Create an alternative script to start Chrome directly (in case Playwright server has issues)
RUN echo '#!/bin/bash' > /app/start-chrome-debug.sh \
    && echo 'source /app/start-xvfb.sh' >> /app/start-chrome-debug.sh \
    && echo 'echo "Starting Chrome in debug mode..."' >> /app/start-chrome-debug.sh \
    && echo 'CHROME_PATH=$(ls /ms-playwright/chromium-*/chrome-linux/chrome | head -n 1)' >> /app/start-chrome-debug.sh \
    && echo 'echo "Using Chrome at: $CHROME_PATH"' >> /app/start-chrome-debug.sh \
    && echo '$CHROME_PATH --headless --disable-gpu --remote-debugging-port=9222 --remote-debugging-address=0.0.0.0 --no-sandbox --disable-dev-shm-usage --user-data-dir=/tmp/chromium-user-data' >> /app/start-chrome-debug.sh \
    && chmod +x /app/start-chrome-debug.sh \
    && dos2unix /app/start-chrome-debug.sh

# Create fallback shell script (for maximum compatibility)
RUN echo '#!/bin/sh' > /app/start.sh \
    && echo 'echo "Starting Playwright server via /bin/sh..."' >> /app/start.sh \
    && echo 'cd /app' >> /app/start.sh \
    && echo 'export DISPLAY=:99' >> /app/start.sh \
    && echo 'Xvfb :99 -screen 0 1280x1024x24 &' >> /app/start.sh \
    && echo 'npx playwright@1.42.0 run-server --port=9222 --host=0.0.0.0' >> /app/start.sh \
    && chmod +x /app/start.sh \
    && dos2unix /app/start.sh

# Create directory for screenshots
RUN mkdir -p /app/screenshots \
    && chmod 777 /app/screenshots

# Expose port for Playwright server
EXPOSE 9222

# Use the fallback shell script for maximum compatibility
CMD ["/bin/sh", "-c", "/app/start.sh"] 